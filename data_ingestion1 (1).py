# -*- coding: utf-8 -*-
"""Data_Ingestion1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AL9kjH6dRO49YfqfwoHoFPtGLSxxI81m
"""

import pandas as pd
from sqlalchemy import create_engine, MetaData, Table, Column, Integer, String, DateTime, Text

# Configurations
DB_URL = "postgresql://username:password@host:port/database"
TABLE_NAME = "data_table"

# Function to load JSON data
def load_data(data.json):
    """Load JSON data into a Pandas DataFrame."""
    try:
        return pd.read_json(data.json)
    except Exception as e:
        print(f"Error loading data from {data.json}: {e}")
        return None

# Function to create an optimized schema and load data into the database
def create_and_load_table(df, db_url, table_name):
    """Create a table with an optimized schema and load data."""
    try:
        # Connect to the database
        engine = create_engine(db_url)
        metadata = MetaData()

        # Define the table schema
        data_table = Table(
            table_name, metadata,
            Column("id", Integer, primary_key=True, unique=True),
            Column("name", String(100), nullable=False),
            Column("email", String(100), unique=True, nullable=False),
            Column("created_at", DateTime, nullable=False),
            Column("description", Text)
        )

        # Create the table
        metadata.create_all(engine)

        # Insert data into the table
        with engine.connect() as conn:
            df.to_sql(table_name, conn, if_exists='replace', index=False)
            print(f"Data successfully loaded into {table_name}!")
    except Exception as e:
        print(f"Error creating/loading table: {e}")

# Main pipeline
def main():
    # File path to JSON dataset
    file_path = "data.json"

    # Load data
    df = load_data(file_path)

    if df is not None:
        # Ensure datetime is normalized
        df['created_at'] = pd.to_datetime(df['created_at'], errors='coerce')

        # Load data into the database
        create_and_load_table(df, DB_URL, TABLE_NAME)
    else:
        print("Data loading failed. Exiting.")

if __name__ == "__main__":
    main()